@page "/ReportPrint/{DatabaseId:int}"
@layout NoLayout

@using BlazorLIMS.Data;
@using Microsoft.EntityFrameworkCore;
@using System;

@if (report != null && report.Status == ReportStatus.COMPLETE)
{


    string fullName = $"{@report.CustomerLastName}, {@report.CustomerFirstName}";
    string dateString = $"{@report.DateReceived.Month}/{@report.DateReceived.Day}/{@report.DateReceived.Year}";
    <h4>@report.LabReportIdFull - @report.ReportType</h4>
    <p>@dateString</p>
    <p>@fullName</p>
    <p>@report.CustomerAddress</p>
    <p>@report.CustomerCounty County</p>
    <p>Agronomist's Comments: @report.AgronomistComment</p>

    @foreach (var sample in @report.Samples)
    {
        <table class="table" style="width: 80%;">
            <thead>
                <th>@sample.LabIdFull</th>
                <th colspan="5">@sample.SampleCode</th>
            </thead>
                <tr>
                    @foreach (var test in @sample.AssignedTests)
                    {
                        string str = @test.Name;
                        if (str.Contains("ICP") || str.Contains("HM"))
                        {
                            str = str.Split(" ")[0];
                        }
                        <th>@str</th>
                        <th>@test.MeasuredValue</th>
                    }
                </tr>
                <tr>
                    @foreach (var test in @sample.AssignedTests)
                    {
                        string str = @test.Name;
                        if (str.Contains("ICP") || str.Contains("HM"))
                        {
                            str = str.Split(" ")[0];
                        }
                        double? resultD = @test.Percentile();
                        resultD = ((int)(resultD * 100)) / 100.0;

                        int result = (int)(resultD);
                        if (@test.Name.Equals("Bulk Density") ||
                            @test.Name.Equals("pH") ||
                            @test.Name.Equals("EC") ||
                            @test.Name.Equals("DW") ||
                            @test.Name.Equals("DM") ||
                            @test.Name.Equals("Biomass"))
                        {
                            <th colspan="2">@result</th>
                        }

                        else if (result <= 25)
                        {
                            <th style="color: blue; " colspan="2">@result - D</th>
                        }

                        else if (result <= 50)
                        {
                            <th style="color: green; " colspan="2">@result - L</th>
                        }

                        else if (result <= 75)
                        {
                            <th style="color: green; " colspan="2">@result - S</th>
                        }

                        else if (result <= 100)
                        {
                            <th style="color: green; " colspan="2">@result - H</th>
                        }

                        else if (result > 100)
                        {
                            <th style="color: red; " colspan="2">@result - E</th>
                        }

                        else
                        {
                            <th colspan="2">@result</th>
                        }
                    }
                </tr>
        </table>
    }
}

else
{
}


@code {

    [Parameter]
    public int DatabaseId { get; set; }

    private ReportModel report;


    private async void CompleteReport() {

        using (var context = new PWSMDbContext())
        {
            try {

            var reportToUpdate = await context.ReportModels.FindAsync(report.ReportModelId);

            reportToUpdate.CustomerFirstName = report.CustomerFirstName;
            reportToUpdate.CustomerLastName = report.CustomerLastName;
            reportToUpdate.CustomerAddress = report.CustomerAddress;
            reportToUpdate.CustomerCounty = report.CustomerCounty;
            reportToUpdate.AgronomistComment = report.AgronomistComment;
            reportToUpdate.Status = ReportStatus.COMPLETE;

            await context.SaveChangesAsync();

            report.Status = ReportStatus.COMPLETE;
            
            }

            catch (Exception ex) {
                Console.WriteLine(ex.Message);
            }
        }

    }

    private int CompareTests(SampleTestModel t1, SampleTestModel t2) {

        if (t1.Name.Contains("ICP")  && !t2.Name.Contains("ICP"))
            return -1;
        
        else if (t2.Name.Contains("ICP")  && !t1.Name.Contains("ICP"))
            return 1;

        else if (t1.Name.Contains("HM")  && !t2.Name.Contains("HM"))
            return -1;
        
        else if (t2.Name.Contains("HM")  && !t1.Name.Contains("HM"))
            return 1;
    
        else
            return String.Compare(t1.Name, t2.Name);
    }


    protected override async Task OnInitializedAsync() {

        using (var context = new PWSMDbContext())
        {
            try {

                report = await context.ReportModels.SingleAsync(r => r.ReportModelId == DatabaseId);

                await context.Entry(report).Collection(r => r.Samples).LoadAsync();

                foreach (var sample in report.Samples)
                {
                    await context.Entry(sample).Collection(s => s.AssignedTests).LoadAsync();

                    sample.AssignedTests.Sort(CompareTests);
                }


                if (report != null
                    && report.Status == ReportStatus.ENTRY
                    && report.EntryComplete())
                {
                    report.Status = ReportStatus.FINALIZE;
                    await context.SaveChangesAsync();
                }
            }
            catch (Exception ex) {
                Console.WriteLine(ex.Message);
            }
        }

    }
}