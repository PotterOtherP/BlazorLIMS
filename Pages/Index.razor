@page "/"

@using System;
@using BlazorLIMS.Data;
@using BlazorLIMS.Components;
@using Microsoft.EntityFrameworkCore;


<ReportCreationForm CreatedReport=@Report OnClickCallback="@Refresh"/>

@* <button>Clear Report Database</button> *@

@if (Report != null && Report.Samples != null)
{
    <button @onclick="PrintReportToConsole">Print to Console</button>

    <table class="table">
        <thead>
            <th><h5>@Report.LabReportIdFull</h5></th>
            <th><h5>@Report.ReportType</h5></th>
            @if (Info.CurrentUser.UserRole == Role.USER ||
                 Info.CurrentUser.UserRole == Role.ADMIN)
            {
                <th><button @onclick="SaveReportToDatabase">Save Report</button></th>
            }
        </thead>
        <thead>
            <th>ID</th>
            <th>Sample</th>
            <th>Tests</th>
            <th>Comment</th>
        </thead>
        @foreach(SampleModel smpl in @Report.Samples)
        {
            <GridSampleRow
            sample=@smpl
            Callback="@Refresh"
            />
        }
    </table>

}

@code {

    private ReportModel Report = new ReportModel();


    private void PrintReportToConsole() {

        Console.WriteLine();

        foreach (SampleModel sample in Report.Samples)
        {
            Console.WriteLine($"{sample.SampleType.Substring(0,1)}{sample.LabId}\t"
                + $"{sample.SampleCode}\t{sample.AssignedTestsString}\t"
                + $"{sample.Comment}");
        }
    }

    private void AddTestToSample(SampleModel sample, TestDataModel row)
    {
        SampleTestModel stm = new SampleTestModel();
        stm.Name = row.TestName;
        stm.LowValue = row.LowValue;
        stm.HighValue = row.HighValue;
        stm.Units = row.Units;
        stm.MeasuredValue = null;

        sample.AssignedTests.Add(stm);
    }

    private async void SaveReportToDatabase() {

        if (Report.Samples.Count < 1)
        {
            Console.WriteLine("Report must have at least one sample.");
            return;
        }

        Console.WriteLine($"Saving report... {Report.LabReportIdFull} {Report.SampleType}, {Report.ReportType}");

        using (var context = new PWSMDbContext())
        {

            foreach (SampleModel sample in Report.Samples)
            {
                Console.WriteLine($"{sample.LabId}: {sample.AssignedTestsString}");

                foreach (string test in sample.AssignedTestsString.Split("|"))
                {
                    if (test.Equals("ICP") || test.Equals("HM"))
                    {
                        var rows = context.TestDataTable
                        .Where(r => (r.TestName.Contains(test) && r.SampleCode.Equals(sample.SampleCode)))
                        .ToList();

                        foreach (var row in rows)
                        {
                            try {
                                AddTestToSample(sample, row);
                            }
                            catch (Exception ex) {
                                Console.WriteLine($"Failed with {sample.LabId}, {row.TestName}");
                                Console.WriteLine(ex.Message);
                            }
                        }
                    }

                    else
                    {
                        var referenceRow = context.TestDataTable.Single(
                            r => (r.TestName.Equals(test) && r.SampleCode.Equals(sample.SampleCode))
                        );

                        AddTestToSample(sample, referenceRow);
                    }
                }

                Console.WriteLine();
            }

            context.ReportModels.Add(Report);

            await context.SaveChangesAsync();
        }
        
        Report.Samples.Clear();
        Report = new ReportModel();
    }
    
    private void Refresh() {
        
        StateHasChanged();
    }

    protected override void OnInitialized() {

        Info.CheckUser();

        Info.PopulateLists();

    }

}