@page "/"

@using System;
@using BlazorLIMS.Data;
@using Microsoft.EntityFrameworkCore;


<ReportCreationForm CreatedReport=@Report OnClickCallback="@CreateGrid"/>

@* <button>Clear Report Database</button> *@

@if (Report != null && Report.Samples != null)
{
    <button @onclick="PrintReportToConsole">Print to Console</button>
    string prefix = "R" + @Report.SampleType.Substring(0,1) + @Report.LabReportId;

    <table class="table">
        <thead>
            <th><h5>@prefix</h5></th>
            <th><h5>@Report.ReportType</h5></th>
            <th><button @onclick="SaveReportToDatabase">Save Report</button></th>
        </thead>
        <thead>
            <th>ID</th>
            <th>Sample</th>
            <th>Tests</th>
            <th>Comment</th>
        </thead>
        @foreach(SampleModel smpl in @Report.Samples)
        {
            <GridSampleRow
            sample=@smpl
            Callback="@Refresh"
            />
        }
    </table>

}

@code {

    private ReportModel Report = new ReportModel();
    
    private void CreateGrid() {


    }

    private async void DeleteAllReports() {

        using (var context = new PWSMDbContext())
        {
            IList<ReportModel> table = await context.PlantReportModels.ToListAsync();
        }
    }

    private void PrintReportToConsole() {

        Console.WriteLine();

        foreach (SampleModel sample in Report.Samples)
        {
            Console.WriteLine($"{sample.SampleType.Substring(0,1)}{sample.LabId}\t"
                + $"{sample.SampleCode}\t{sample.AssignedTestsString}\t"
                + $"{sample.Comment}");
        }
    }

    private async void SaveReportToDatabase() {

        Console.WriteLine("Saving report...");

        using (var context = new PWSMDbContext())
        {

            foreach (SampleModel sample in Report.Samples)
            {
                Console.Write($"{sample.LabId}:");

                foreach (string test in sample.AssignedTestsString.Split("|"))
                {
                    Console.Write($" {test}");
                }

                Console.WriteLine();
            }

            @* switch (Report.SampleType)
            {
                case "Plant":
                {
                    context.PlantReportModels.Add(Report);
                } break;

                case "Waste":
                {
                    context.WasteReportModels.Add(Report);
                } break;

                case "Solution":
                {
                    context.SolutionReportModels.Add(Report);
                } break;

                case "Media":
                {
                    context.MediaReportModels.Add(Report);
                } break;

                default: {} break;
            } *@

            await context.SaveChangesAsync();
        }
    }
    
    private void Refresh() {

        StateHasChanged();
    }

    protected override void OnInitialized() {

        Info.PopulateLists();

    }

}