@using BlazorLIMS.Data;
@using System;

@inject IJSRuntime JSRuntime;

<tr style="background-color: #aaeeaa; ">
    @{
        var letter = @sample.SampleType.Substring(0,1);

        var menu = Info.PlantCodes;
        testMenuArray = Info.PlantTestMenu;

        if (@sample.SampleType.Equals("Waste")) 
        {
            menu = Info.WasteCodes;
            testMenuArray = Info.WasteTestMenu;
        }

        if (@sample.SampleType.Equals("Solution")) 
        {
            menu = Info.SolutionCodes;
            testMenuArray = Info.SolutionTestMenu;
        }

        if (@sample.SampleType.Equals("Media")) 
        {
            menu = Info.MediaCodes;
            testMenuArray = Info.MediaTestMenu;
        }
    }

    <th>@letter@sample.LabId</th>
    <th>
        <select value=@sample.SampleCode
            @onchange="(ui) => SampleChange(ui.Value.ToString())"
        >
            @foreach (var item in menu)
            {
                <option value=@item>@item</option>
            }
        </select>
    </th>
    <th>
        @{ var divId = $"{@sample.LabId}Div"; }

        <div class="test-edit-menu" id=@divId style="display: none;">
        
        @foreach (var item in testMenuArray)
        {
            var chk = @sample.AssignedTestsString.StartsWith($"{item}|") ||
                      @sample.AssignedTestsString.EndsWith($"|{item}") ||
                      @sample.AssignedTestsString.Contains($"|{item}|") ||
                      @sample.AssignedTestsString.Equals(item);

            var boxId = $"{@sample.LabId}{item}Box";

            <div style="display: flex; flex-direction: flex-row;">
            <input type="checkbox" value=@item id=@boxId
            @onchange="TestChange"
            checked=@chk>
            <label for=@boxId>@item</label>
            </div>
        }
        </div>
        @foreach (var item in @sample.AssignedTestsString.Split("|"))
        {
            @item <span>&nbsp;</span>
        }
        <button @onclick="ToggleTestEditMenu">Edit</button>
    </th>
    <th>
        <input type="text" @bind=@sample.Comment>
    </th>
    <th>
        <button @onclick="Copy">Copy</button>
    </th>
    <th>
        <button @onclick="Delete">Delete</button>
    </th>
</tr>


@code {

    [Parameter]
    public SampleModel sample { get; set; }

    [Parameter]
    public EventCallback Callback { get; set; }

    private string[] testMenuArray;
    private bool testEditVisible = false;


    private async void Copy() {

        sample.Report.DuplicateSample(sample.LabId);

        await Callback.InvokeAsync();
    }

    private async void Delete() {

        sample.Report.RemoveSample(sample.LabId);

        await Callback.InvokeAsync();
    }

    private async void SampleChange(string value) {

        sample.SampleCode = value;

        using (var context = new PWSMDbContext())
        {
            var result = context.SampleCodeTable.First(row => row.Name.Equals(sample.SampleCode));
            sample.AssignedTestsString = result.DefaultTestString;
        }

        await Callback.InvokeAsync();
    }

    private async void TestChange() {

        string str = "";

        foreach (var test in testMenuArray)
        {
            string bName = $"{sample.LabId}{test}Box";
            var result = await JSRuntime.InvokeAsync<bool>("boxChecked", bName);

            if (result)
            {
                str += test + "|";
            }
        }

        while (str.EndsWith("|"))
        {
            str = str.Substring(0, str.Length - 1);
        }

        if (str.Length <= 0)
            str = "ICP";
        
        sample.AssignedTestsString = str;
        await Callback.InvokeAsync();
    }

    private async void ToggleTestEditMenu() {

        string divId = $"{@sample.LabId}Div";

        await JSRuntime.InvokeVoidAsync("toggleVisibility", divId, testEditVisible);

        testEditVisible = !testEditVisible;

    }


}