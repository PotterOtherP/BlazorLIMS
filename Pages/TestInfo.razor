@page "/TestInfo"

@using Microsoft.EntityFrameworkCore;
@using BlazorLIMS.Data;
@using BlazorLIMS.Components;
@using System;

<style>
    input[type=number]::-webkit-inner-spin-button, 
    input[type=number]::-webkit-outer-spin-button { 
    -webkit-appearance: none; 
    }

    input[type=number] {
    -moz-appearance: textfield;
}
</style>

@if (Info.CurrentUser.UserRole == Role.ADMIN)
{

<button @onclick="CreateDummyData">Create Dummy Data</button>

<table class="table">
    <thead>
        <tr>
            @* <th>Total rows: @TestDatas.Count</th> *@
            @* <th><button @onclick="PrintInfoToConsole">Info</button></th> *@
            @* <th><button @onclick="DeleteAllRows">Delete Everything</button></th> *@
            @* <th><button @onclick="CreateEverything">Create Everything</button></th> *@
            @* <th>Total rows: @TestDatas.Count</th> *@
        </tr>
        <tr>
            <th>
                <select @bind="CurrentDisplaySampleCode">
                    @foreach (var pCode in Info.PlantCodes)
                    {
                        <option value=@pCode>@pCode</option>
                    }
                    @foreach (var wCode in Info.WasteCodes)
                    {
                        <option value=@wCode>@wCode</option>
                    }
                    @foreach (var sCode in Info.SolutionCodes)
                    {
                        <option value=@sCode>@sCode</option>
                    }
                    @foreach (var mCode in Info.MediaCodes)
                    {
                        <option value=@mCode>@mCode</option>
                    }
                </select>
            </th>
            <th>Test Name</th>
            <th>Low</th>
            <th>High</th>
            <th>Units</th>
        </tr>
    </thead>
    <tbody>
        
        @if (TestDatas == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var test in TestDatas)
            {
                if (@test.SampleCode.Equals(CurrentDisplaySampleCode))
                {

                    var color = "#cccccc";
                    if (TestDatas.IndexOf(test) % 2 == 0)
                        color = "#eeeeee";

                    <TestDataRow
                    DatabaseId=@test.Id
                    SampleCode=@test.SampleCode
                    Name=@test.TestName
                    LowValue=@test.LowValue
                    HighValue=@test.HighValue
                    Units=@test.Units
                    RenderParent="@OnInitializedAsync"
                    BGColor=@color
                    />
                }
            }
        }

    </tbody>

</table>
}

else
{
    <h4>You must be logged in as an admin to view this page.</h4>
}

@code {

    private IList<TestDataModel> TestDatas;

    private string CurrentDisplaySampleCode = "";

    private async void CreateDummyData() {

        var rando = new Random();

        using (var context = new PWSMDbContext())
        {
            try {

                TestDatas = await context.TestDataTable.ToListAsync();

                foreach (var row in TestDatas)
                {
                    if (row.Units.Equals("ppm"))
                    {
                        row.LowValue = rando.Next(30, 300) * 1.0;
                        row.HighValue = rando.Next(600, 1100) * 1.0;
                    }

                    else if (row.Units.Equals("pct"))
                    {
                        row.LowValue = rando.Next(2, 5) * 1.0;
                        row.HighValue = rando.Next(9, 15) * 1.0;
                    }

                    else if (row.TestName.Equals("pH"))
                    {
                        row.LowValue = 7.0;
                        row.HighValue = 8.0;
                    }

                    else if (row.TestName.Equals("EC"))
                    {
                        row.LowValue = 0.1;
                        row.HighValue = 3.0;

                        if (Array.IndexOf(Info.WasteCodesArray, row.SampleCode) >= 0)
                        {
                            row.LowValue = 1.0;
                            row.HighValue = 30.0;
                        }
                    }

                    if (row.TestName.Equals("DM"))
                    {
                        row.LowValue = 0.0;
                        row.HighValue = 100.0;
                    }
                }

            }
            catch (Exception ex) {
                Console.WriteLine(ex.Message);
            }

            await context.SaveChangesAsync();
        }

    }

    protected override async Task OnInitializedAsync() {

        Info.CheckUser();

        Info.PopulateLists();

        if (Info.PlantCodes != null && Info.PlantCodes.Count > 0)
        {
            CurrentDisplaySampleCode = Info.PlantCodes[0];
        }

        using (var context = new PWSMDbContext())
        {
            try
            {
                TestDatas = await context.TestDataTable.ToListAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }


}