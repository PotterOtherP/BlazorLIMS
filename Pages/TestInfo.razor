@page "/TestInfo"

@using Microsoft.EntityFrameworkCore;
@using BlazorLIMS.Data;
@using BlazorLIMS.Components;
@using System;

<table class="table">
    <thead>
        <tr>
            <th>Test</th>
            <th>Long name</th>
            <th>Sample code</th>
            <th>Default</th>
            <th>Low</th>
            <th>High</th>
            <th>Units</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th><input type="text" @bind="CreateShortName"></th>
            <th><input type="text" @bind="CreateLongName"></th>
            <th><input type="text" @bind="CreateSampleCode"></th>
            <th>
                <select @bind="CreateDefault">
                    <option value="No">No</option>        
                    <option value="Yes">Yes</option>        
                </select>
            </th>
            <th><input type="number" step=".01" @bind="CreateLow"></th>
            <th><input type="number" step=".01" @bind="CreateHigh"></th>
            <th><input type="text" @bind="CreateUnits"></th>
            <th><button @onclick="CreateTestData">Add New</button></th>


        </tr>

        @if (TestDatas == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var test in TestDatas)
            {
                string assigned = "No";
                if (@test.DefaultAssigned == true)
                {
                    assigned = "Yes";
                }

                <TestDataRow
                DatabaseId=@test.Id
                ShortName=@test.ShortName
                LongName=@test.LongName
                SampleCode=@test.SampleCode
                DefaultAssigned=@assigned
                LowValue=@test.LowValue
                HighValue=@test.HighValue
                Units=@test.Units
                RenderParent="@OnInitializedAsync"
                />
            }
        }

    </tbody>

</table>

@code {

    private IList<LabTestData> TestDatas;

    private string CreateShortName;
    private string CreateLongName;
    private string CreateSampleCode;
    private string CreateDefault;
    private double CreateLow;
    private double CreateHigh;
    private string CreateUnits;

    private async void CreateTestData() {

        using (var context = new PWSMDbContext())
        {
            try
            {
                var newTestData = new LabTestData();
                newTestData.ShortName = CreateShortName;
                newTestData.LongName = CreateLongName;
                newTestData.SampleCode = CreateSampleCode;
                
                newTestData.DefaultAssigned = false;
                if (CreateDefault.Equals("Yes"))
                {
                    newTestData.DefaultAssigned = true;
                }
                newTestData.LowValue = CreateLow;
                newTestData.HighValue = CreateHigh;
                newTestData.Units = CreateUnits;

                context.TestDataTable.Add(newTestData);
                await context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync() {

        using (var context = new PWSMDbContext())
        {
            try
            {
                TestDatas = await context.TestDataTable.ToListAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}