@page "/TestInfo"

@using Microsoft.EntityFrameworkCore;
@using BlazorLIMS.Data;
@using BlazorLIMS.Components;
@using System;

<button @onclick="PrintInfoToConsole">Info</button>
<button @onclick="DeleteAllRows">Delete Everything</button>

<table class="table">
    <thead>
        <tr>
            <th>Sample code</th>
            <th>Test</th>
            <th>Default</th>
            <th>Low</th>
            <th>High</th>
            <th>Units</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th>
                <select @bind="CreateSampleCode">
                    @foreach (var item in Info.PlantCodes)
                    {
                        <option value="@item">@item</option>
                    }
                    @foreach (var item in Info.WasteCodes)
                    {
                        <option value="@item">@item</option>
                    }
                    @foreach (var item in Info.SolutionCodes)
                    {
                        <option value="@item">@item</option>
                    }
                    @foreach (var item in Info.MediaCodes)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </th>
            <th>
                <select @bind="CreateName">
                    @foreach (var item in Info.AllTests)
                    {
                        <option value="@item">@item</option>
                    }
                    @foreach (var item in Info.ICPTests)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </th>
            <th>
                <select @bind="CreateDefault">
                    <option value="No">No</option>        
                    <option value="Yes">Yes</option>        
                </select>
            </th>
            <th><input type="number" step=".1" @bind="CreateLow"></th>
            <th><input type="number" step=".1" @bind="CreateHigh"></th>
            <th><input type="text" @bind="CreateUnits"></th>
            <th><button @onclick="CreateRow">Add</button></th>


        </tr>

        @if (TestDatas == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var test in TestDatas)
            {
                string assigned = "No";
                if (@test.DefaultAssigned == true)
                {
                    assigned = "Yes";
                }

                <TestDataRow
                DatabaseId=@test.Id
                SampleCode=@test.SampleCode
                Name=@test.Name
                DefaultAssigned=@assigned
                LowValue=@test.LowValue
                HighValue=@test.HighValue
                Units=@test.Units
                RenderParent="@OnInitializedAsync"
                />
            }
        }

    </tbody>

</table>

@code {

    private readonly int MAX_TABLE_SIZE = 10000;

    private IList<LabTestData> TestDatas;

    private string CreateName = "";
    private string CreateSampleCode = "";
    private string CreateDefault = "No";
    private double CreateLow = 0.0;
    private double CreateHigh = 100.0;
    private string CreateUnits = "%";


    private async void CreateAllDefaultTests() {

        PrintInfoToConsole();
        DeleteAllRows();

        await OnInitializedAsync();
    }

    private async void CreateRow() {

        using (var context = new PWSMDbContext())
        {
            var count = await context.TestDataTable.CountAsync();
            if (count >= MAX_TABLE_SIZE)
            {
                Console.WriteLine("Test data table is too big.");
                return;
            }

            try
            {
                var newTestData = new LabTestData();
                newTestData.Name = CreateName;
                newTestData.SampleCode = CreateSampleCode;
                
                newTestData.DefaultAssigned = false;
                if (CreateDefault.Equals("Yes"))
                {
                    newTestData.DefaultAssigned = true;
                }
                newTestData.LowValue = CreateLow;
                newTestData.HighValue = CreateHigh;
                newTestData.Units = CreateUnits;
 
                context.TestDataTable.Add(newTestData);
                await context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                
            }
        }

        await OnInitializedAsync();
    }

    private async void DeleteAllRows() {

        using (var context = new PWSMDbContext())
        {
            while (TestDatas.Count > 0)
            {
                try
                {
                    var RowToDelete = await context.TestDataTable.FindAsync(TestDatas[0].Id);
                    context.TestDataTable.Remove(RowToDelete);
                    await context.SaveChangesAsync();
                    TestDatas = await context.TestDataTable.ToListAsync();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                    break;
                }

            }
        }

        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync() {

        using (var context = new PWSMDbContext())
        {
            try
            {
                TestDatas = await context.TestDataTable.ToListAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private void PrintInfoToConsole() {

        int plantCount = Info.PlantCodes.Count();
        int wasteCount = Info.WasteCodes.Count();
        int solutionCount = Info.SolutionCodes.Count();
        int mediaCount = Info.MediaCodes.Count();
        int totalCodeCount = plantCount + wasteCount + solutionCount + mediaCount;

        Console.Write($"There are {totalCodeCount} total sample types: ");
        Console.WriteLine($"{plantCount} plant, {wasteCount} waste, {solutionCount} solution, "
          + $" and {mediaCount} media.");

        int testCount = Info.AllTests.Count() + Info.ICPTests.Count();

        Console.WriteLine($"There are {testCount} total tests.");

        Console.WriteLine($"For a total of {testCount * totalCodeCount} entries in the table.");
    }


}