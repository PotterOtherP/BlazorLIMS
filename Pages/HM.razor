@page "/HM"

@using Microsoft.EntityFrameworkCore;
@using BlazorLIMS.Data;
@using BlazorLIMS.Components;
@using System;

@if (Info.CurrentUser.UserRole == Role.USER || Info.CurrentUser.UserRole == Role.ADMIN)
{
<button @onclick="ReadRandomData">Read Data</button>

<table class="table">
    <thead>
        <th>Sample ID</th>
        <th>Sample Code</th>
        <th>Cd</th>
        <th>Ni</th>
        <th>Pb</th>
    </thead>

    @foreach (var s in HMSamples)
    {
        <tr>
            <th>@s.LabIdFull</th>
            <th>@s.SampleCode</th>
            @foreach (var t in s.AssignedTests)
            {
                if (t.Name.Contains("HM"))
                {
                    <TestValueInput test=@t />
                }
            }
        </tr>
    }
</table>
}

else
{
    <h4>You must be logged in as a user to view this page.</h4>
}


@code {

    private List<ReportModel> savedReports;
    private List<SampleModel> HMSamples;


    private int CompareTestNames(SampleTestModel m1, SampleTestModel m2) {

        return String.Compare(m1.Name, m2.Name);
    }

    protected override async Task OnInitializedAsync() {

        Info.CheckUser();

        using (var context = new PWSMDbContext())
        {
            savedReports = await context.ReportModels
            .Where(r => r.Status == ReportStatus.ENTRY)
            .Include("Samples.AssignedTests")
            .ToListAsync();

        }

        HMSamples = new List<SampleModel>();

        foreach (var report in savedReports)
        {
            foreach (var sample in report.Samples)
            {
                sample.AssignedTests.Sort(CompareTestNames);

                if (sample.HMAssigned())
                    HMSamples.Add(sample);
            }
        }
    }

    private async void ReadRandomData() {

        using (var context = new PWSMDbContext())
        {
            foreach (var sample in HMSamples)
            {
                foreach (var test in sample.AssignedTests)
                {
                    if (test.MeasuredValue != null)
                        continue;

                    if (!test.Name.Contains("HM"))
                        continue;

                    var rando = new Random();
                    double result = rando.Next(5, 499) * 1.0;

                    test.MeasuredValue = result;

                    var testModelToUpdate = await context.SampleTestModels.FindAsync(test.Id);
                    testModelToUpdate.MeasuredValue = result;

                }
            }

            await context.SaveChangesAsync();
        }
    }
}