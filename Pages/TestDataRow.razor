@using BlazorLIMS.Data;
@using System;

<tr style="background-color: @BGColor;">
    <th>@SampleCode</th>
    <th>@Name</th>
    <th><input type="number" step="none" value="@LowValue" class="test-input"
        style="background-color: white;"
        @onchange="(ui) => UpdateLowValue(Convert.ToDouble(ui.Value))">
    </th>
    <th><input type="number" step="0.1" value="@HighValue" class="test-input"
        style="background-color: white;"
        @onchange="(ui) => UpdateHighValue(Convert.ToDouble(ui.Value))">
    </th>
    <th>
        <select value="@Units"
        @onchange="(ui) => UpdateUnits(ui.Value.ToString())">
            <option value="g">g</option>
            <option value="mg">mg</option>
            <option value="pct">pct</option>
            <option value="ppm">ppm</option>
            <option value="mS/cm">mS/cm</option>
            <option value="lb/cy">lb/cy</option>
            <option value="N/A">N/A</option>
        </select>
    </th>
</tr>

@code {

    [Parameter]
    public int DatabaseId { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string SampleCode { get; set; }

    [Parameter]
    public string Units { get; set; }

    [Parameter]
    public double LowValue { get; set; }
 
    [Parameter]
    public double HighValue { get; set; }

    [Parameter]
    public EventCallback RenderParent { get; set; }

    [Parameter]
    public string BGColor { get; set; }


    private async void UpdateHighValue(double value) {

        using (var context = new PWSMDbContext())
        {
            try
            {
                var RowToUpdate = await context.TestDataTable.FindAsync(DatabaseId);

                if (RowToUpdate != null)
                {
                    RowToUpdate.HighValue = value;
                    await context.SaveChangesAsync();
                    Console.WriteLine($"Changed high value of item {DatabaseId} to {value}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

    }

    private async void UpdateLowValue(double value) {

        using (var context = new PWSMDbContext())
        {
            try
            {
                var RowToUpdate = await context.TestDataTable.FindAsync(DatabaseId);

                if (RowToUpdate != null)
                {
                    RowToUpdate.LowValue = value;
                    await context.SaveChangesAsync();
                    Console.WriteLine($"Changed low value of item {DatabaseId} to {value}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

    }

    private async void UpdateUnits(string value) {

        using (var context = new PWSMDbContext())
        {
            try
            {
                var RowToUpdate = await context.TestDataTable.FindAsync(DatabaseId);

                if (RowToUpdate != null)
                {
                    RowToUpdate.Units = value;
                    await context.SaveChangesAsync();
                    Console.WriteLine($"Changed units of item {DatabaseId} to {value}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }


}