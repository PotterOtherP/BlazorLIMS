@using System;
@using BlazorLIMS.Data;
@using Microsoft.EntityFrameworkCore;

<div style="display: flex; flex-direction: column; width: 30%">

<h1 style="margin: 20px">PWSM Lab Receiving</h1>

<select value="@CreateSampleType" style="margin: 20px"
   @onchange="(ui) => MenuChange(ui.Value.ToString())">
    <option value="Plant">Plant</option>
    <option value="Waste">Waste</option>
    <option value="Solution">Solution</option>
    <option value="Media">Media</option>
</select>

<select @bind="CreateReportType" style="margin: 20px">
    <option value="Predictive">Predictive</option>
    <option value="Diagnostic">Diagnostic</option>
    <option value="Research">Research</option>
    <option value="Internal">Internal</option>
    <option value="OutOfState">Out of State</option>
</select>

<select @bind="CreateSampleCode" style="margin: 20px">
    @{
        if (CreateSampleType == "Plant")
        {
            foreach(string pCode in Info.PlantCodes)
            {
                <option value="@pCode">@pCode</option>
            }
        }

        else if (CreateSampleType == "Waste")
        {
            foreach(string wCode in Info.WasteCodes)
            {
                <option value="@wCode">@wCode</option>
            }
        }

        else if (CreateSampleType == "Solution")
        {
            foreach(string sCode in Info.SolutionCodes)
            {
                <option value="@sCode">@sCode</option>
            }
        }

        else if (CreateSampleType == "Media")
        {
            foreach(string mCode in Info.MediaCodes)
            {
                <option value="@mCode">@mCode</option>
            }
        }
    }
</select>

<input @bind="CreateNumberOfSamples" type="number" min="1" max="50" style="margin: 20px; width: 15%">

<input @bind="CreateReportDate" type="date" style="margin: 20px; width: 35%">

<button @onclick="CreateReportFromForm" style="margin: 20px">Create Grid</button>

</div>

@code {

    private string CreateReportType = "Predictive";
    private string CreateSampleType = "Plant";
    private string CreateSampleCode = (Info.PlantCodes.Count > 0) ? Info.PlantCodes[0] : "";
    private int CreateNumberOfSamples = 1;
    private DateTime CreateReportDate = DateTime.Now;

    private int NextReportNumber = 0;
    private int NextSampleNumber = 0;

    private readonly int INIT_SAMPLE_NUMBER = 1001;
    private readonly int INIT_REPORT_NUMBER = 101;

    [Parameter]
    public ReportModel CreatedReport { get; set; }

    [Parameter]
    public EventCallback OnClickCallback { get; set; }

    private async void CreateReportFromForm() {

        StateHasChanged();

        // Get next report number and sample numbers from database
        GetNextNumbers();

        CreatedReport.LabReportId = NextReportNumber;
        CreatedReport.SampleType = CreateSampleType;
        CreatedReport.ReportType = CreateReportType;
        CreatedReport.IsComplete = false;
        CreatedReport.IsDeleted = false;
        CreatedReport.DateReceived = CreateReportDate;
        CreatedReport.Samples = new List<SampleModel>();

        for (int i = 0; i < CreateNumberOfSamples; ++i)
        {
            var s = new SampleModel();
            s.LabId = NextSampleNumber + i;
            s.SampleType = CreateSampleType;
            s.SampleCode = CreateSampleCode;
            s.Report = CreatedReport;

            using (var context = new PWSMDbContext())
            {
                var result = context.SampleCodeTable.First(row => row.Name.Equals(CreateSampleCode));
                s.AssignedTestsString = result.DefaultTestString;
            }

            CreatedReport.Samples.Add(s);
        }

        await OnClickCallback.InvokeAsync();

    }

    private void GetNextNumbers() {

        using (var context = new PWSMDbContext())
        {
            switch (CreateSampleType)
            {
                case "Plant":
                {
                    NextReportNumber = context.PlantReportModels.Count();
                    NextSampleNumber = context.PlantSampleModels.Count();
                } break;

                case "Waste":
                {
                    NextReportNumber = context.WasteReportModels.Count();
                    NextSampleNumber = context.WasteSampleModels.Count();
                } break;

                case "Solution":
                {
                    NextReportNumber = context.SolutionReportModels.Count();
                    NextSampleNumber = context.SolutionSampleModels.Count();
                } break;

                case "Media":
                {
                    NextReportNumber = context.MediaReportModels.Count();
                    NextSampleNumber = context.MediaSampleModels.Count();
                } break;

                default: {} break;
            }
        }

        NextReportNumber += INIT_REPORT_NUMBER;
        NextSampleNumber += INIT_SAMPLE_NUMBER;
    }

    private void MenuChange(string type) {

        CreateSampleType = type;

        if (type.Equals("Plant"))
            CreateSampleCode = (Info.PlantCodes.Count > 0) ? Info.PlantCodes[0] : "";
        else if (type.Equals("Waste"))
            CreateSampleCode = (Info.WasteCodes.Count > 0) ? Info.WasteCodes[0] : "";
        else if (type.Equals("Solution"))
            CreateSampleCode = (Info.SolutionCodes.Count > 0) ? Info.SolutionCodes[0] : "";
        else if (type.Equals("Media"))
            CreateSampleCode = (Info.MediaCodes.Count > 0) ? Info.MediaCodes[0] : "";
    }
}