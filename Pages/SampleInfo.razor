@page "/SampleInfo"

@using Microsoft.EntityFrameworkCore;
@using BlazorLIMS.Data;
@using BlazorLIMS.Components;
@using System;

@inject IJSRuntime JSRuntime;

@if (Info.CurrentUser.UserRole == Role.ADMIN)
{
<select value=@CreateSampleType style="margin: 20px"
    @onchange="(ui) => SetSampleType(ui.Value.ToString())" >
    <option value="Plant">Plant</option>
    <option value="WasteLiquid">Waste (Liquid)</option>
    <option value="WasteSolid">Waste (Solid)</option>
    <option value="Solution">Solution</option>
    <option value="Media">Media</option>
</select>

<input type="text" @bind="CreateSampleCode" style="margin: 20px;" />

<button @onclick="CreateRow" style="margin: 20px;">Create</button>

@* <button @onclick="DeleteEverything" style="margin: 20px">Delete Everything</button> *@

<div style="display: flex; flex-direction: flex-row; ">
    @foreach (var test in TestMenu)
    {
        bool deflt = IsDefault(@CreateSampleType, @test);
        var boxId = $"{@test}Box";

        <p style="margin: 10px; font-weight: bold;">
            <input type="checkbox" id=@boxId value=@test checked=@deflt/>
            <label for=@test>@test</label>
        </p>
    }

</div>


<table class="table">
    <thead>

    </thead>
    <tbody>
        @if (SampleCodes == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            int count = 0;

            foreach (var item in SampleCodes)
            {
                    
                if (item.Type.Equals(CreateSampleType) ||
                (item.Type.Equals("Waste") && (CreateSampleType.Equals("WasteLiquid")
                                            || CreateSampleType.Equals("WasteSolid")))
                )
                {

                    ++count;
                    var color = (count % 2 == 0) ? "#cccccc" : "#eeeeee";

                    <SampleCodeRow
                    RowId=@item.Id
                    Name=@item.Name
                    Type=@item.Type
                    DefaultTests=@item.DefaultTestString
                    OnClickCallback="@SetTable"
                    BGColor=@color
                    />
                }
            }
        }
    </tbody>
</table>
}

else
{
    <h4>You must be logged in as an admin to view this page.</h4>
}


@code {

    private List<SampleCodeModel> SampleCodes;

    private string CreateSampleType = "Plant";
    private string CreateSampleCode = "";

    private string[] TestMenu;

    private async void CreateRow() {

        var newRow = new SampleCodeModel();

        newRow.Name = CreateSampleCode;
        newRow.Type = CreateSampleType;

        if (CreateSampleCode.Length <= 0)
            return;

        if (CreateSampleType.Equals("WasteLiquid") || CreateSampleType.Equals("WasteSolid"))
        {
            newRow.Type = "Waste";
        }

        string newTests = "";

        foreach (var test in TestMenu)
        {
            string bName = $"{test}Box";
            var result = await JSRuntime.InvokeAsync<bool>("boxChecked", bName);

            if (result)
            {
                newTests += test + "|";
            }
        }

        newRow.DefaultTestString = newTests.Substring(0, newTests.Length - 1);

        using (var context = new PWSMDbContext())
        {
            try
            {
                context.SampleCodeTable.Add(newRow);
                await context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            // Create the test rows

            foreach (var test in TestMenu)
            {
                if (test.Equals("ICP"))
                {
                    foreach (var icpTest in Info.ICPTests)
                        CreateTestDataRow(CreateSampleCode, icpTest);
                }

                else if (test.Equals("HM"))
                {
                    foreach (var hmTest in Info.HMTests)
                        CreateTestDataRow(CreateSampleCode, hmTest);
                }

                else
                    CreateTestDataRow(CreateSampleCode, test);
            }
        }

        Info.PopulateLists();
        await SetTable();
        StateHasChanged();
    }


    private async void CreateTestDataRow(string sampleCode, string testName) {

        var newTestData = new TestDataModel();

        newTestData.SampleCode = sampleCode;
        newTestData.TestName = testName;

        newTestData.LowValue = 0.0;
        newTestData.HighValue = 100.0;

        newTestData.Units = GetUnits(testName);

        using (var context = new PWSMDbContext())
        {
            try {
                await context.TestDataTable.AddAsync(newTestData);
                await context.SaveChangesAsync();
            }
            catch (Exception ex) {
                Console.WriteLine(ex.Message);
            }
        }

    }


    private async void DeleteEverything() {

        Console.WriteLine("Deleting...");

        using (var context = new PWSMDbContext())
        {
            IList<TestDataModel> testDataModels = await context.TestDataTable.ToListAsync();
            IList<SampleCodeModel> sampleRowModels = await context.SampleCodeTable.ToListAsync();

            while (sampleRowModels.Count > 0)
            {
                try {
                    var modelToDelete = await context.SampleCodeTable.FindAsync(sampleRowModels[0].Id);
                    context.SampleCodeTable.Remove(modelToDelete);
                    await context.SaveChangesAsync();
                    sampleRowModels = await context.SampleCodeTable.ToListAsync();

                }
                catch (Exception ex) {
                    Console.WriteLine(ex.Message);
                    return;
                }
            }

            while (testDataModels.Count > 0)
            {
                try {

                    var modelToDelete = await context.TestDataTable.FindAsync(testDataModels[0].Id);
                    context.TestDataTable.Remove(modelToDelete);
                    await context.SaveChangesAsync();
                    testDataModels = await context.TestDataTable.ToListAsync();
                }
                catch (Exception ex) {
                    Console.WriteLine(ex.Message);
                    return;
                }
            }

        }

        await SetTable();
        StateHasChanged();

        Console.WriteLine("Done.");
    }


    private string GetUnits(string testName) {

        switch (testName)
        {
            case "P (ICP)":
            case "N":
            case "K (ICP)":
            case "Ca (ICP)":
            case "Mg (ICP)":
            case "S (ICP)":
            {
                if (CreateSampleType.Equals("Plant"))
                    return "pct";
            } break;

            case "C":
            case "CCE":
            case "DM":
            {
                return "pct";
            }

            case "EC":
            {
                return "mS/cm";
            }

            case "pH":
            {
                return "N/A";
            }

            case "DW":
            {
                return "g";
            }

            case "Bulk Density":
            {
                return "lb/cy";
            }

            default:
                return "ppm";
        }

        return "ppm";
    }


    private bool IsDefault(string type, string name) {

        switch(type)
        {
            case "Plant":
            {
                return (name.Equals("ICP") || name.Equals("N"));
            }

            case "WasteSolid":
            {
                return (name.Equals("ICP") || name.Equals("N") || name.Equals("DM"));
            }

            case "WasteLiquid":
            {
                return (name.Equals("ICP") || name.Equals("TKN") || name.Equals("pH"));
            }

            case "Solution":
            {
                return (name.Equals("ICP") || name.Equals("CBC") || name.Equals("EC")
                    || name.Equals("pH") || name.Equals("Cl") || name.Equals("NH4/NO3"));
            }

            case "Media":
            {
                return (name.Equals("ICP") || name.Equals("pH")
                    || name.Equals("NH4/NO3") || name.Equals("EC"));
            }
        }

        return false;
    }


    protected override async Task OnInitializedAsync() {

        Info.CheckUser();

        Info.PopulateLists();

        SetSampleType("Plant");

        await SetTable();
    }


    private int CompareSampleCodeRows(SampleCodeModel s1, SampleCodeModel s2) {

        return String.Compare(s1.Name, s2.Name);
    }


    private async Task SetTable() {

        using (var context = new PWSMDbContext())
        {
            try
            {
                SampleCodes = await context.SampleCodeTable.ToListAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }


        SampleCodes.Sort(CompareSampleCodeRows);

    }


    private void SetSampleType(string value) {

        @* Console.WriteLine($"Sample type set to {value}"); *@

        if (value.Equals("Plant"))
            TestMenu = Info.PlantTestMenu;

        else if (value.Equals("WasteLiquid") || value.Equals("WasteSolid"))
            TestMenu = Info.WasteTestMenu;

        else if (value.Equals("Solution"))
            TestMenu = Info.SolutionTestMenu;

        else if (value.Equals("Media"))
            TestMenu = Info.MediaTestMenu;

        CreateSampleType = value;

    }
}