@page "/ICP"

@using Microsoft.EntityFrameworkCore;
@using BlazorLIMS.Data;
@using BlazorLIMS.Components;
@using System;

@if (Info.CurrentUser.UserRole == Role.USER || Info.CurrentUser.UserRole == Role.ADMIN)
{

@if (savedReports == null)
{
    <h4>Loading...</h4>
}

else
{

<button @onclick="ReadRandomData">Read Data</button>

<table class="table">
    <thead>
        <th>Sample ID</th>
        <th>Sample Code</th>
        <th>Al</th>
        <th>B</th>
        <th>Ca</th>
        <th>Cu</th>
        <th>Fe</th>
        <th>K</th>
        <th>Mg</th>
        <th>Mn</th>
        <th>Na</th>
        <th>P</th>
        <th>S</th>
        <th>Zn</th>
    </thead>

    @foreach (var s in ICPSamples)
    {
        <tr>
            <th>@s.LabIdFull</th>
            <th>@s.SampleCode</th>
            @foreach (var t in s.AssignedTests)
            {
                if (t.Name.Contains("ICP"))
                {
                    <TestValueInput test=@t />
                }
            }
        </tr>
    }

</table>
}

}

else
{
    <h4>You must be logged in as a user to view this page.</h4>
}

@code {

    private List<ReportModel> savedReports;
    private List<SampleModel> ICPSamples;

    private int CompareTestNames(SampleTestModel m1, SampleTestModel m2) {

        return String.Compare(m1.Name, m2.Name);
    }

    protected override async Task OnInitializedAsync() {

        Info.CheckUser();

        using (var context = new PWSMDbContext())
        {
            savedReports = await context.ReportModels
            .Where(r => r.Status == ReportStatus.ENTRY)
            .Include("Samples.AssignedTests")
            .ToListAsync();

        }

        ICPSamples = new List<SampleModel>();

        foreach (var report in savedReports)
        {
            foreach (var sample in report.Samples)
            {
                sample.AssignedTests.Sort(CompareTestNames);

                if (sample.ICPAssigned())
                    ICPSamples.Add(sample);
            }
        }
    }

    private async void ReadRandomData() {

        using (var context = new PWSMDbContext())
        {
            foreach (var sample in ICPSamples)
            {
                foreach (var test in sample.AssignedTests)
                {
                    if (test.MeasuredValue != null)
                        continue;

                    if (!test.Name.Contains("ICP"))
                        continue;

                    var rando = new Random();
                    double result = rando.Next(5, 1000) * 1.0;

                    if (sample.SampleType.Equals("Plant"))
                    {
                        if (test.Name.Equals("Ca (ICP)") ||
                            test.Name.Equals("K (ICP)")  ||
                            test.Name.Equals("Mg (ICP)") ||
                            test.Name.Equals("P (ICP)" ) ||
                            test.Name.Equals("S (ICP)"))
                            {
                                result = rando.NextDouble() * 5.0;
                                result = ((int)(result * 100)) / 100.0;
                            }
                    }

                    test.MeasuredValue = result;

                    var testModelToUpdate = await context.SampleTestModels.FindAsync(test.Id);
                    testModelToUpdate.MeasuredValue = result;

                }
            }

            await context.SaveChangesAsync();
        }
    }
}