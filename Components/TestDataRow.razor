@using BlazorLIMS.Data;
@using System;

<tr style="background-color: @BGColor">
    <th>@SampleCode</th>
    <th>@Name</th>
    <th>@DefaultAssigned</th>
    <th><input type="number" step="0.1" value="@LowValue"
        @onchange="(ui) => UpdateLowValue(Convert.ToDouble(ui.Value))">
    </th>
    <th>@HighValue</th>
    <th>@Units</th>
</tr>

@code {

    [Parameter]
    public int DatabaseId { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string SampleCode { get; set; }

    [Parameter]
    public string DefaultAssigned { get; set; }

    [Parameter]
    public string Units { get; set; }

    [Parameter]
    public double LowValue { get; set; }
 
    [Parameter]
    public double HighValue { get; set; }

    [Parameter]
    public EventCallback RenderParent { get; set; }

    [Parameter]
    public string BGColor { get; set; }

    private async void UpdateLowValue(double value) {

        using (var context = new PWSMDbContext())
        {
            try
            {
                var RowToUpdate = await context.TestDataTable.FindAsync(DatabaseId);

                if (RowToUpdate != null)
                {
                    RowToUpdate.LowValue = value;
                    await context.SaveChangesAsync();
                    Console.WriteLine($"Changed low value of item {DatabaseId} to {value}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

    }

    private async void DeleteRow() {

        using (var context = new PWSMDbContext())
        {
            try
            {

                var RowToDelete = await context.TestDataTable.FindAsync(DatabaseId);

                if (RowToDelete != null)
                {
                    context.TestDataTable.Remove(RowToDelete);
                    await context.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        await RenderParent.InvokeAsync();
    }

    private async void DuplicateRow() {

        var newRow = new LabTestData();

        newRow.Name = this.Name;
        newRow.SampleCode = this.SampleCode;
        newRow.DefaultAssigned = (this.DefaultAssigned == "Yes" ? true : false);
        newRow.LowValue = this.LowValue;
        newRow.HighValue = this.HighValue;
        newRow.Units = this.Units;

        using (var context = new PWSMDbContext())
        {
            await context.TestDataTable.AddAsync(newRow);
            await context.SaveChangesAsync();
        }

        await RenderParent.InvokeAsync();
    }
}